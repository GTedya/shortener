// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/GTedya/shortener/internal/app/models"
	gomock "github.com/golang/mock/gomock"
)

// MockShortenerInterface is a mock of ShortenerInterface interface.
type MockShortenerInterface struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerInterfaceMockRecorder
}

// MockShortenerInterfaceMockRecorder is the mock recorder for MockShortenerInterface.
type MockShortenerInterfaceMockRecorder struct {
	mock *MockShortenerInterface
}

// NewMockShortenerInterface creates a new mock instance.
func NewMockShortenerInterface(ctrl *gomock.Controller) *MockShortenerInterface {
	mock := &MockShortenerInterface{ctrl: ctrl}
	mock.recorder = &MockShortenerInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortenerInterface) EXPECT() *MockShortenerInterfaceMockRecorder {
	return m.recorder
}

// DeleteUrls mocks base method.
func (m *MockShortenerInterface) DeleteUrls(ctx context.Context, ids []string, userID string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteUrls", ctx, ids, userID)
}

// DeleteUrls indicates an expected call of DeleteUrls.
func (mr *MockShortenerInterfaceMockRecorder) DeleteUrls(ctx, ids, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUrls", reflect.TypeOf((*MockShortenerInterface)(nil).DeleteUrls), ctx, ids, userID)
}

// Expand mocks base method.
func (m *MockShortenerInterface) Expand(ctx context.Context, id string) (models.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Expand", ctx, id)
	ret0, _ := ret[0].(models.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Expand indicates an expected call of Expand.
func (mr *MockShortenerInterfaceMockRecorder) Expand(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Expand", reflect.TypeOf((*MockShortenerInterface)(nil).Expand), ctx, id)
}

// FormatShortURL mocks base method.
func (m *MockShortenerInterface) FormatShortURL(urlID string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FormatShortURL", urlID)
	ret0, _ := ret[0].(string)
	return ret0
}

// FormatShortURL indicates an expected call of FormatShortURL.
func (mr *MockShortenerInterfaceMockRecorder) FormatShortURL(urlID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FormatShortURL", reflect.TypeOf((*MockShortenerInterface)(nil).FormatShortURL), urlID)
}

// GenerateNewUserID mocks base method.
func (m *MockShortenerInterface) GenerateNewUserID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateNewUserID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GenerateNewUserID indicates an expected call of GenerateNewUserID.
func (mr *MockShortenerInterfaceMockRecorder) GenerateNewUserID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateNewUserID", reflect.TypeOf((*MockShortenerInterface)(nil).GenerateNewUserID))
}

// GetStats mocks base method.
func (m *MockShortenerInterface) GetStats(ctx context.Context) (models.Stats, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats", ctx)
	ret0, _ := ret[0].(models.Stats)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStats indicates an expected call of GetStats.
func (mr *MockShortenerInterfaceMockRecorder) GetStats(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockShortenerInterface)(nil).GetStats), ctx)
}

// GetUrlsCreatedBy mocks base method.
func (m *MockShortenerInterface) GetUrlsCreatedBy(ctx context.Context, userID string) ([]models.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUrlsCreatedBy", ctx, userID)
	ret0, _ := ret[0].([]models.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUrlsCreatedBy indicates an expected call of GetUrlsCreatedBy.
func (mr *MockShortenerInterfaceMockRecorder) GetUrlsCreatedBy(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUrlsCreatedBy", reflect.TypeOf((*MockShortenerInterface)(nil).GetUrlsCreatedBy), ctx, userID)
}

// HealthCheck mocks base method.
func (m *MockShortenerInterface) HealthCheck(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockShortenerInterfaceMockRecorder) HealthCheck(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockShortenerInterface)(nil).HealthCheck), ctx)
}

// Shorten mocks base method.
func (m *MockShortenerInterface) Shorten(ctx context.Context, url, userID string) (models.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shorten", ctx, url, userID)
	ret0, _ := ret[0].(models.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Shorten indicates an expected call of Shorten.
func (mr *MockShortenerInterfaceMockRecorder) Shorten(ctx, url, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shorten", reflect.TypeOf((*MockShortenerInterface)(nil).Shorten), ctx, url, userID)
}

// ShortenBatch mocks base method.
func (m *MockShortenerInterface) ShortenBatch(ctx context.Context, batch []models.ShortURL, userID string) ([]models.ShortURL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenBatch", ctx, batch, userID)
	ret0, _ := ret[0].([]models.ShortURL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenBatch indicates an expected call of ShortenBatch.
func (mr *MockShortenerInterfaceMockRecorder) ShortenBatch(ctx, batch, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenBatch", reflect.TypeOf((*MockShortenerInterface)(nil).ShortenBatch), ctx, batch, userID)
}
